// Autogenerated Schema file for PetWg69NetV1
import * as c from "https://deno.land/x/kubernetes_apis@v0.1.0/common.ts";

import * as MetaV1 from "https://deno.land/x/kubernetes_apis@v0.1.0/builtin/meta@v1/structs.ts";
type Kind<T extends string> = {
  apiVersion: "pet.wg69.net/v1";
  kind: T;
};
type ListOf<T> = {
  metadata: MetaV1.ListMeta;
  items: Array<T>;
};

export type BlockDevice = Kind<"BlockDevice"> & BlockDeviceFields;
export interface BlockDeviceFields {
  status?: {
    sataStatus: string;
    smartReport?: {
      collectionTime: c.Time;
      attributes: Array<{
        rawValue?: string | null;
        id?: number | null;
        currentHealth?: number | null;
        worstHealth?: number | null;
        name?: string | null;
        threshold?: number | null;
        type?: string | null;
      }>;
      errors: Array<string>;
      overallAssessment: string;
    } | null;
    smartEnabled: boolean;
  } | null;
  metadata?: MetaV1.ObjectMeta | null;
  spec: {
    logicalSectorSize?: number | null;
    formFactor?: string | null;
    userCapacityHuman?: string | null;
    deviceModel?: string | null;
    serialNumber?: string | null;
    physicalSectorSize?: number | null;
    rotationRate?: c.IntOrString | null;
    nodeName: string;
    devicePath: string;
    userCapacity: number;
  };
}
export function toBlockDeviceFields(input: c.JSONValue): BlockDeviceFields {
  const obj = c.checkObj(input);
  return {
    status: c.readOpt(obj["status"], toBlockDeviceFields_status),
    metadata: c.readOpt(obj["metadata"], MetaV1.toObjectMeta),
    spec: toBlockDeviceFields_spec(obj["spec"]),
  }}
export function toBlockDevice(input: c.JSONValue): BlockDevice {
  const {apiVersion, kind, ...fields} = c.checkObj(input);
  if (apiVersion !== "pet.wg69.net/v1") throw new Error("Type apiv mis 2");
  if (kind !== "BlockDevice") throw new Error("Type kind mis 2");
  return {
    apiVersion, kind,
    ...toBlockDeviceFields(fields),
  }}
export function fromBlockDevice(input: BlockDevice): c.JSONValue {
  return {
    ...input,
    status: input.status != null ? {
      ...input.status,
      smartReport: input.status.smartReport != null ? {
        ...input.status.smartReport,
        collectionTime: input.status.smartReport.collectionTime != null ? c.fromTime(input.status.smartReport.collectionTime) : undefined,
      } : undefined,
    } : undefined,
    metadata: input.metadata != null ? MetaV1.fromObjectMeta(input.metadata) : undefined,
  }}
export function toBlockDeviceFields_status(input: c.JSONValue) {
  const obj = c.checkObj(input);
  return {
    sataStatus: c.checkStr(obj["sataStatus"]),
    smartReport: c.readOpt(obj["smartReport"], toBlockDeviceFields_status_smartReport),
    smartEnabled: c.checkBool(obj["smartEnabled"]),
  }}
export function toBlockDeviceFields_spec(input: c.JSONValue) {
  const obj = c.checkObj(input);
  return {
    logicalSectorSize: c.readOpt(obj["logicalSectorSize"], c.checkNum),
    formFactor: c.readOpt(obj["formFactor"], c.checkStr),
    userCapacityHuman: c.readOpt(obj["userCapacityHuman"], c.checkStr),
    deviceModel: c.readOpt(obj["deviceModel"], c.checkStr),
    serialNumber: c.readOpt(obj["serialNumber"], c.checkStr),
    physicalSectorSize: c.readOpt(obj["physicalSectorSize"], c.checkNum),
    rotationRate: c.readOpt(obj["rotationRate"], c.toIntOrString),
    nodeName: c.checkStr(obj["nodeName"]),
    devicePath: c.checkStr(obj["devicePath"]),
    userCapacity: c.checkNum(obj["userCapacity"]),
  }}
export function toBlockDeviceFields_status_smartReport(input: c.JSONValue) {
  const obj = c.checkObj(input);
  return {
    collectionTime: c.toTime(obj["collectionTime"]),
    attributes: c.readList(obj["attributes"], toBlockDeviceFields_status_smartReport_attributes),
    errors: c.readList(obj["errors"], c.checkStr),
    overallAssessment: c.checkStr(obj["overallAssessment"]),
  }}
export function toBlockDeviceFields_status_smartReport_attributes(input: c.JSONValue) {
  const obj = c.checkObj(input);
  return {
    rawValue: c.readOpt(obj["rawValue"], c.checkStr),
    id: c.readOpt(obj["id"], c.checkNum),
    currentHealth: c.readOpt(obj["currentHealth"], c.checkNum),
    worstHealth: c.readOpt(obj["worstHealth"], c.checkNum),
    name: c.readOpt(obj["name"], c.checkStr),
    threshold: c.readOpt(obj["threshold"], c.checkNum),
    type: c.readOpt(obj["type"], c.checkStr),
  }}

/** BlockDeviceList is a list of BlockDevice */
export interface BlockDeviceList {
  kind?: string | null;
  metadata?: {
    remainingItemCount?: number | null;
    resourceVersion?: string | null;
    selfLink?: string | null;
    continue?: string | null;
  } | null;
  items: Array<BlockDevice>;
  apiVersion?: string | null;
}
export function toBlockDeviceList(input: c.JSONValue): BlockDeviceList {
  const obj = c.checkObj(input);
  return {
    kind: c.readOpt(obj["kind"], c.checkStr),
    metadata: c.readOpt(obj["metadata"], toBlockDeviceList_metadata),
    items: c.readList(obj["items"], toBlockDevice),
    apiVersion: c.readOpt(obj["apiVersion"], c.checkStr),
  }}
export function fromBlockDeviceList(input: BlockDeviceList): c.JSONValue {
  return {
    ...input,
    items: input.items?.map(fromBlockDevice),
  }}
export function toBlockDeviceList_metadata(input: c.JSONValue) {
  const obj = c.checkObj(input);
  return {
    remainingItemCount: c.readOpt(obj["remainingItemCount"], c.checkNum),
    resourceVersion: c.readOpt(obj["resourceVersion"], c.checkStr),
    selfLink: c.readOpt(obj["selfLink"], c.checkStr),
    continue: c.readOpt(obj["continue"], c.checkStr),
  }}
