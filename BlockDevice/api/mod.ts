export * from "./structs.ts";

// Autogenerated API file for PetWg69NetV1
import * as c from "https://deno.land/x/kubernetes_apis@v0.1.0/common.ts";
import * as operations from "https://deno.land/x/kubernetes_apis@v0.1.0/operations.ts";
import * as MetaV1 from "https://deno.land/x/kubernetes_apis@v0.1.0/builtin/meta@v1/structs.ts";
import * as PetWg69NetV1 from "./structs.ts";

export class PetWg69NetV1Api {
  #client: c.RestClient;
  #root = "/apis/pet.wg69.net/v1/";
  constructor(client: c.RestClient) {
    this.#client = client;
  }

  async getBlockDevice(name: string, opts: {
    resourceVersion?: string;
    abortSignal?: AbortSignal;
  } = {}) {
    const query = new URLSearchParams;
    if (opts["resourceVersion"] != null) query.append("resourceVersion", opts["resourceVersion"]);
    const resp = await this.#client.performRequest({
      method: "GET",
      path: `${this.#root}blockdevices/${name}`,
      expectJson: true,
      querystring: query,
      abortSignal: opts.abortSignal,
    });
    return PetWg69NetV1.toBlockDevice(resp);
  }

  async deleteBlockDevice(name: string, body: MetaV1.DeleteOptions, opts: operations.DeleteOpts = {}) {
    const resp = await this.#client.performRequest({
      method: "DELETE",
      path: `${this.#root}blockdevices/${name}`,
      expectJson: true,
      querystring: operations.formatDeleteOpts(opts),
      bodyJson: MetaV1.fromDeleteOptions(body),
      abortSignal: opts.abortSignal,
    });
    return PetWg69NetV1.toBlockDevice(resp);
  }

  async replaceBlockDevice(name: string, body: PetWg69NetV1.BlockDevice, opts: operations.PutOpts = {}) {
    const resp = await this.#client.performRequest({
      method: "PUT",
      path: `${this.#root}blockdevices/${name}`,
      expectJson: true,
      querystring: operations.formatPutOpts(opts),
      bodyJson: PetWg69NetV1.fromBlockDevice(body),
      abortSignal: opts.abortSignal,
    });
    return PetWg69NetV1.toBlockDevice(resp);
  }

  async patchBlockDevice(name: string, body: MetaV1.Patch, opts: operations.PutOpts = {}) {
    const resp = await this.#client.performRequest({
      method: "PATCH",
      path: `${this.#root}blockdevices/${name}`,
      expectJson: true,
      querystring: operations.formatPutOpts(opts),
      bodyJson: MetaV1.fromPatch(body),
      abortSignal: opts.abortSignal,
    });
    return PetWg69NetV1.toBlockDevice(resp);
  }

  async getBlockDeviceList(opts: operations.GetListOpts = {}) {
    const resp = await this.#client.performRequest({
      method: "GET",
      path: `${this.#root}blockdevices`,
      expectJson: true,
      querystring: operations.formatGetListOpts(opts),
      abortSignal: opts.abortSignal,
    });
    return PetWg69NetV1.toBlockDeviceList(resp);
  }

  async watchBlockDeviceList(opts: operations.WatchListOpts = {}) {
    const resp = await this.#client.performRequest({
      method: "GET",
      path: `${this.#root}blockdevices`,
      expectJson: true,
      expectStream: true,
      querystring: operations.formatWatchListOpts(opts),
      abortSignal: opts.abortSignal,
    });
    return resp.pipeThrough(new c.WatchEventTransformer(PetWg69NetV1.toBlockDevice, MetaV1.toStatus));
  }

  async createBlockDevice(body: PetWg69NetV1.BlockDevice, opts: operations.PutOpts = {}) {
    const resp = await this.#client.performRequest({
      method: "POST",
      path: `${this.#root}blockdevices`,
      expectJson: true,
      querystring: operations.formatPutOpts(opts),
      bodyJson: PetWg69NetV1.fromBlockDevice(body),
      abortSignal: opts.abortSignal,
    });
    return PetWg69NetV1.toBlockDevice(resp);
  }

  async deleteBlockDeviceList(opts: operations.GetListOpts = {}) {
    const resp = await this.#client.performRequest({
      method: "DELETE",
      path: `${this.#root}blockdevices`,
      expectJson: true,
      querystring: operations.formatGetListOpts(opts),
      abortSignal: opts.abortSignal,
    });
    return PetWg69NetV1.toBlockDeviceList(resp);
  }

}
